// Задача, которая описана ниже, демонстрирует результативный метод оптимизации
// страницы.
// С целью экономии трафика и более быстрой загрузки страницы изображения на
// ней заменяются на «макеты».
// Вместо такого изображения:
/*
<img src="yozhik.jpg" width="128" height="128">
*/
// Стоит вот такое:
/*
<img src="1.gif" width="128" height="128" realsrc="yozhik.jpg">
*/
// То есть настоящий URL находится в атрибуте realsrc (название атрибута можно
// выбрать любое). А в src поставлен серый GIF размера 1x1, и так как
// width/height правильные, то он растягивается, так что вместо изображения
// виден серый прямоугольник.
// При этом, чтобы браузер загрузил изображение, нужно заменить значение src на
// то, которое находится в realsrc.
// Если страница большая, то замена больших изображений на такие макеты
// существенно убыстряет полную загрузку страницы. Это особенно заметно в
// случае, когда на странице много анонсов новостей с картинками или
// изображений товаров, из которых многие находятся за пределами прокрутки.
// Кроме того, для мобильных устройств JavaScript может подставлять URL
// уменьшенного варианта картинки.
// Напишите код, который при прокрутке окна загружает ставшие видимыми
// изображения.
// То есть, как только изображение попало в видимую часть документа – в src
// нужно прописать правильный URL из realsrc.
// Особенности реализации:
// * При начальной загрузке некоторые изображения должны быть видны сразу, до
// прокрутки. Код должен это учитывать.
// * Некоторые изображения могут быть обычными, без realsrc. Их код не должен
// трогать вообще.
// * Также код не должен перегружать уже показанное изображение.
// * Желательно предусмотреть загрузку изображений не только видимых сейчас, но
// и на страницу вперед и назад от текущего места.
// P.S. Горизонтальной прокрутки нет.

// Примечание: в решении имя атрибута изменено на data-realsrc.

let images = [].slice.call(document.querySelectorAll("img[data-realsrc]"));

function onScroll() {
  images.forEach((img, i) => {
    const imgPosY = img.getBoundingClientRect();
    const imgPosTop = imgPosY.top;
    const imgPosBottom = imgPosY.bottom;
    const clientHeight = document.documentElement.clientHeight;
    if (imgPosTop > 0 && imgPosTop < clientHeight * 2
      || imgPosBottom > 0 && imgPosBottom < clientHeight * 2) {
      console.log("set attr");
      img.setAttribute("src", img.dataset.realsrc);
      delete images[i];
    }
  });
}

onScroll();
document.addEventListener("scroll", onScroll);
