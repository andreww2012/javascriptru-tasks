// Это не решение задачи, а примеры использования новых возможностей плюс их краткое описание.

// 1. Параметры по умолчанию
// Можно указывать параметры по умолчанию через равенство =.
// Параметр по умолчанию используется при отсутствующем аргументе или равном undefined.
// Параметры по умолчанию могут быть не только значениями, но и выражениями.
function showMenu(title = "Заголовок", width = 100, height = 200) {
  alert('title=' + title + ' width=' + width + ' height=' + height);
}
showMenu(undefined, null); // title=Заголовок width=null height=200

// 2. Оператор "..."
// Чтобы получить массив аргументов, можно использовать оператор "...". Он должен быть в конце.
// Этот же оператор можно использовать и при вызове функции, для передачи массива параметров как списка.
function showName(firstName, lastName, ...rest) {
  alert(firstName + ' ' + lastName + ' - ' + rest);
}
showName("Юлий", "Цезарь", "Император", "Рима"); // выведет: Юлий Цезарь - Император,Рима

// 3. Деструктуризация в параметрах
// Если функция получает объект, то она может его тут же разбить в переменные.
// Можно использовать и более сложную деструктуризацию, с соответствиями и значениями по умолчанию.
// Если хочется, чтобы функция могла быть вызвана вообще без аргументов – нужно добавить ей параметр по умолчанию –
// уже не внутрь деструктуризации, а в самом списке аргументов.
function showMenu({title="Заголовок", width:w=100, height:h=200} = {}) { // можно вызывать без аргументов
  alert(title + ' ' + w + ' ' + h);
}

// 4. Улучшенное свойство name функций
// В свойстве name у функции находится её имя. Теперь при создании анонимной функции с одновременной записью
// в переменную или свойство – её имя равно названию переменной (или свойства).
let g = function() {}; // g.name == "g"
let user = {
  sayHi: function() {} // user.sayHi.name == "sayHi";
};

// 5. Объявление функции в блоке
// Теперь объявление функции Function Declaration, сделанное в блоке, видно только в этом блоке.
if (true) {
  sayHi(); // работает
  function sayHi() { alert("Привет!"); }
}
sayHi(); // ошибка

// 6. Упрощённый способ создания функций через стрелку
// ВАЖНО: внутри функций-стрелок – тот же this и arguments, что и снаружи.
// Базовый синтаксис:
let inc = x => x+1;
// Если аргументов несколько, то нужно обернуть их в скобки:
let sum = (a,b) => a + b;
// Если нужно задать функцию без аргументов, то также используются скобки, в этом случае – пустые:
let getTime = () => new Date().getHours() + ':' + new Date().getMinutes();
// Когда тело функции достаточно большое, то можно его обернуть в фигурные скобки {…} (но нужен return):
let getTime = () => {
  let date = new Date();
  let hours = date.getHours();
  let minutes = date.getMinutes();
  return hourse + ':' + minutes;
};