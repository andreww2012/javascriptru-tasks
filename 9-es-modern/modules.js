// Это не решение задачи, а примеры использования новых возможностей плюс их
// краткое описание. Записываю для себя.
// Полная статья: http://learn.javascript.ru/generator

// 1. Понятие модуля. Работа с модулями через библиотеки
// Модулем считается файл с кодом. Средства для организации модулей:
// * AMD (см. википедию), требует наличия клиентской библиотеки, например,
// http://requirejs.org/
// * CommonJS – система модулей, встроенная в сервер Node.JS
// (http://commonjs.org/)
// * UMD – СМ, которая предложена в качестве универсальной
// (https://github.com/umdjs/umd)
// Все перечисленные выше системы требуют различных библиотек или систем сборки
// для использования. Новый стандарт отличается от них прежде всего тем, что
// это – стандарт. Однако, сейчас браузерной поддержки почти нет, поэтому
// используют babel и системы сборки (напр., webpack или branch).

// 2. Модули в ES6
// В модуле ключевым словом export помечаются переменные и функции, которые
// могут быть использованы снаружи. Другие модули могут подключать их через
// вызов import.

// 2.1. export
// Ключевое слово export можно ставить
// * перед объявлением переменных, функций и классов.
// * отдельно, при этом в фигурных скобках указывается, что именно
// экспортируется.
export let one = 1;
let two = 2; export {two};
export {one, two}; // Экспорт двух переменных
// При помощи кл. слова as можно указать, под какими именами будут снаружи
// доступны переменные:
export {one as once, two as twice};
// Экспорт функций и классов (у функции и у класса при таком экспорте должно
// быть имя!):
export class User {};
export function sayHi() { alert("Hello!"); };

// 2.2. import
// Др. модули могут подключать экспортированные значения при помощи ключевого
// слова import. Пример:
import {one, two} from "./nums";
// Здесь:
// * "./nums" – модуль, как правило это путь к файлу модуля.
// * one, two – импортируемые переменные, которые должны быть обозначены в nums
// словом export.
// Импортировать можно и под другим именем, указав его в «as»:
import {one as item1, two as item2} from "./nums";
alert( `${item1} and ${item2}` ); // 1 and 2
// Импорт всех значений в виде объекта:
import * as numbers from "./nums";
alert( `${numbers.one} and ${numbers.two}` ); // 1 and 2

// 2.3. export default
// Для ситуации, когда один модуль экспортирует одно значение, есть спец.
// сочетание export default:
// user.js
export default class User_ { };
// login.js
import User from './user';
new User("Вася");
// Если бы в user.js не было default, то в login.js необходимо было бы указать
// фигурные скобки.

// 3. Использование
// Современный стандарт ECMAScript описывает, как импортировать и
// экспортировать значения из модулей, но он ничего не говорит о том, как эти
// модули искать, загружать и т.п. Такие механизмы предлагались в процессе
// создания стандарта, но были убраны по причине недостаточной проработанности.
// Возможно, они появятся в будущем. Сейчас используются системы сборки, как
// правило, в сочетании с Babel.JS. Система сборки обрабатывает скрипты,
// находит в них import/export и заменяет их на свои внутренние
// JavaScript-вызовы. При этом, как правило, много файлов-модулей объединяются
// в один или несколько скриптов, смотря как указано в конфигурации сборки.
// Пример см. в статье про модули на сайте.
